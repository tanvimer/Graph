import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
     static int count=0;
     static int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
        static int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
    public static void dfs(int[][] arr,int x,int y,boolean[][] visited){
        visited[x][y]=true;
        count++;
        for(int i=0;i<8;i++)
        {
           int newx=dx[i]+x;
           int newy=dy[i]+y;
           if(newx>=0 && newx<arr.length && newy>=0 && newy<arr[0].length && visited[newx][newy]==false && arr[newx][newy]==1){
           dfs(arr,newx,newy,visited);
           }
           
        }
    }
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);

		int t=sc.nextInt();
	    while(t!=0){
	        
	        int res=0;
	        int n=sc.nextInt();
	        int m=sc.nextInt();
	        int arr[][]=new int[n][m];
	        for(int i=0;i<n;i++)
	            for(int j=0;j<m;j++)
	                arr[i][j]=sc.nextInt();
	   
	       boolean visited[][] = new boolean[n][m];
	       for(int i=0;i<n;i++){
	           for(int j=0;j<m;j++){
	               if(arr[i][j] == 1 && visited[i][j]==false)
	               {
	                   
	                    dfs(arr,i,j,visited);
	                   res=Math.max(res,count);
	                    count=0;
	               }
	           }
	       }
	       System.out.println(res);
	       
	        t--;
	    }
	}
}